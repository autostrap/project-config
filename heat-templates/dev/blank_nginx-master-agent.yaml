heat_template_version: 2014-10-16

description: |
  This template deploys two VMs (puppetmaster and nginx-server) for testing and development of
  autostrap.standalone. Usage example:

  heat stack-create -e ~/.heat/autostrap.yaml \
     -P key_name=jgrassler \
     -P public_net_id=float2 \
     -P flavor=m1.small \
     -f blank_nginx-master-agent.yaml \
     blank_nginx-master-agent

  Once your stack is up and running you can kick off the bootstrapping process
  by running the following command on puppetmaster...

    /root/bootstrap-scripts/stage0/autostrap.standalone \
       -m topics="base puppet-agent puppet-master"

  ...and the following command on nginx-server:

    /root/bootstrap-scripts/stage0/autostrap.standalone \
       -m topics="base puppet-agent" \
       -m nodetype=docserver \
       -m floating_ip=<IP>

  (substitute the machine's floating IP address for <IP>)
 
  
parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers

  image:
    type: string
    default: Ubuntu-14.04-LTS from cloud-images.ubuntu.com
    description: Name of image to use for servers

  flavor:
    type: string
    default: m1.small
    description: Flavor to use for nodes

  public_net_id:
    type: string
    description: ID of public network for which floating IP addresses will be allocated

  deploy_key:
    type: string
    description: SSH private key required to access repositories. Will be written to /root/deploy_key.
    hidden: true
    default: ''

  override_yaml:
    type: string
    description: Top-level overrides for Hiera configuration. Will be written to /root/override.yaml.
    default: ''

  scripts_branch:
    type: string
    description: Branch to use for initial clone of bootstrap-scripts.
    default: master

  scripts_repo:
    type: string
    description: URL of bootstrap-scripts repository. Will be cloned to /root/bootstrap-scripts.
    default: https://github.com/autostrap/bootstrap-scripts.git

resources:

  ### Creates a Neutron network and subnet


  bootstrap:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - type: text
          config:
            str_replace:
              params:
                $deploy_key: { get_param: deploy_key }
                $override_yaml: { get_param: override_yaml }
                $scripts_repo: { get_param: scripts_repo }
                $scripts_branch: { get_param: scripts_branch }
              template: |
                #!/usr/bin/env bash
                set -x

                export scripts_repo=$scripts_repo
                export scripts_branch=$scripts_branch

                cat > /root/override.yaml <<'EOF'
                $override_yaml
                EOF

                cat > /root/deploy_key <<'EOF'
                $deploy_key
                EOF

                umount /config

                cp ~ubuntu/.ssh/authorized_keys /root/.ssh/authorized_keys

                apt-get -y update
                apt-get -y install git

                git clone --branch $scripts_branch "$scripts_repo" /root/bootstrap-scripts

  network:
    type: AS::network
    properties:
      router: { get_resource: router }
      name:
        list_join:
          - '_'
          - [ heat, { get_param: 'OS::stack_name' } ]

  
  # Creates a Neutron router for floating IPs and/or SNAT.

  router:
    type: OS::Neutron::Router
    properties:
      name:
        list_join:
          - '_'
          - [ 'router', 'heat', { get_param: 'OS::stack_name' } ]
      external_gateway_info:
        network: { get_param: public_net_id }


  ### Security group for SSH access from outside
  #   (Add your own rule for allowing access to Uchiwa from outside or tunnel it
  #    through SSH).

  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Allow inbound SSH traffic"
      name: allow ssh from anywhere
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: tcp, port_range_min: 22, port_range_max: 22 }
 
  allow_http:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Allow inbound HTTP traffic"
      name: allow ssh from anywhere
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: tcp, port_range_min: 80, port_range_max: 80 }
 

  ### Puppet Master

  puppetmaster:
    type: OS::Nova::Server
    properties:
      name: puppetmaster
      config_drive: false
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_attr: [ puppetmaster_port, port ] }
      metadata:
        stack_name: { get_param: 'OS::stack_name' }
        floating_ip: { get_attr: [ puppetmaster_port, floating_ip_address ] }
        topics: "base puppet-master puppet-agent ssh"
        puppet_master: puppetmaster.local
        project_classes: true
      user_data: { get_resource: bootstrap }
      user_data_format: RAW

  puppetmaster_port:
    type: AS::floatport
    properties:
      public_net: { get_param: public_net_id }
      internal_net: { get_resource: network }
      security_groups: 
        - { get_resource: allow_ssh }
        - { get_attr: [ network, security_group ] }  # Allow all connections over internal network


  ### Web Server

  nginx-server:
    type: OS::Nova::Server
    properties:
      name: nginx-server
      config_drive: false
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_attr: [ nginx-server_port, port ] }
      metadata:
        stack_name: { get_param: 'OS::stack_name' }
        floating_ip: { get_attr: [ nginx-server_port, floating_ip_address ] }
        nodetype: docserver
        puppet_master: puppetmaster.local
        topics: "base puppet-agent ssh"
      user_data: { get_resource: bootstrap }
      user_data_format: RAW

  nginx-server_port:
    type: AS::floatport
    properties:
      public_net: { get_param: public_net_id }
      internal_net: { get_resource: network }
      security_groups: 
        - { get_resource: allow_ssh }
        - { get_resource: allow_http }
        - { get_attr: [ network, security_group ] }  # Allow all connections over internal network


outputs:
  puppetmaster_floating_ip: 
    value: { get_attr: [ puppetmaster_port, floating_ip_address ] }
  nginx-server_floating_ip: 
    value: { get_attr: [ nginx-server_port, floating_ip_address ] }
